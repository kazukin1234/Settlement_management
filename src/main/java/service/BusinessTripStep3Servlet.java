package service;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Collection;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import bean.BusinessTripBean;
import bean.Step3Detail;
import bean.UploadedFile;

/**
 * 出張申請 ステップ3（交通費明細入力）を処理するサーブレット。
 * <p>
 * - doGet(): 初期表示用にセッションのBeanから明細データを読み込み JSP に渡す。<br>
 * - doPost(): 入力内容とアップロードファイルを処理し、Bean に反映する。
 * <p>
 * ファイルは一時保存ディレクトリ `/temp_uploads` に UUID付きで保存される。
 * <p>
 * 次の画面（確認画面）または前画面（Step2）へのリダイレクトを含む。
 * <br><br>
 * 【Generated by ChatGPT】
 */
@WebServlet("/businessTripStep3")
@MultipartConfig(
	    fileSizeThreshold = 1024 * 1024,
	    maxFileSize = 10 * 1024 * 1024,
	    maxRequestSize = 50 * 1024 * 1024
	)
public class BusinessTripStep3Servlet extends HttpServlet {
    private static final long serialVersionUID = 1L;

    // Ở phiên bản này, chúng ta vẫn dùng đường dẫn vật lý tuyệt đối
    private static final String TEMP_UPLOAD_DIR = "/temp_uploads";

    /**
     * Step3の画面初期表示。
     * <p>
     * セッション上の `trip` Bean から明細がなければ空の `Step3Detail` を1つ作成し、
     * JSPにデータを渡す。
     *
     * @param request  リクエスト
     * @param response レスポンス
     * @throws ServletException サーブレット例外
     * @throws IOException 入出力例外
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession(false);
        if (session == null || session.getAttribute("trip") == null) {
            response.sendRedirect(request.getContextPath() + "/businessTripInit");
            return;
        }

        BusinessTripBean trip = (BusinessTripBean) session.getAttribute("trip");

        if (trip.getStep3Details().isEmpty()) {
            trip.getStep3Details().add(new Step3Detail());
        }
        
        request.setAttribute("trip", trip);
        request.getRequestDispatcher("/WEB-INF/views/serviceJSP/businessTrip3.jsp").forward(request, response);
    }

    /**
     * Step3の入力フォーム送信時の処理。
     * <p>
     * 入力値とアップロードされたファイルを受け取り、`Step3Detail` のリストとして
     * `BusinessTripBean` に格納する。
     * <p>
     * ファイルはUUID付きの一意名で保存。<br>
     * actionパラメータにより Step2 への戻り or 確認画面への進行を分岐。
     *
     * @param request  リクエスト
     * @param response レスポンス
     * @throws ServletException サーブレット例外
     * @throws IOException 入出力例外
     */
 // Trong file service/BusinessTripStep3Servlet.java
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        HttpSession session = request.getSession(false);

        if (session == null || session.getAttribute("trip") == null) {
            response.sendRedirect(request.getContextPath() + "/businessTripInit");
            return;
        }

        String action = request.getParameter("action");
        if ("go_back".equals(action)) {
            response.sendRedirect(request.getContextPath() + "/businessTripStep2");
            return;
        }
        
        // === BẮT ĐẦU LOGIC "CẬP NHẬT TẠI CHỖ" MỚI ===
        BusinessTripBean trip = (BusinessTripBean) session.getAttribute("trip");

        // 1. Xử lý file cần xóa
        String filesToDeleteParam = request.getParameter("filesToDelete");
        if (filesToDeleteParam != null && !filesToDeleteParam.isEmpty()) {
            List<String> filesToDeleteList = List.of(filesToDeleteParam.split(","));
            String realPath = getServletContext().getRealPath("");
            for (Step3Detail detail : trip.getStep3Details()) {
                detail.getTemporaryFiles().removeIf(file -> filesToDeleteList.contains(file.getUniqueStoredName()));
            }
        }

        // 2. Lấy dữ liệu từ form và danh sách trong session
        String[] transProjects = request.getParameterValues("transProject[]");
        List<Step3Detail> detailsInSession = trip.getStep3Details();
        int numSubmittedBlocks = (transProjects != null) ? transProjects.length : 0;
        
        // 3. Cập nhật/thêm mới các block chi tiết
        String[] departures = request.getParameterValues("departure[]");
        String[] arrivals = request.getParameterValues("arrival[]");
        String[] transports = request.getParameterValues("transport[]");
        String[] fareAmounts = request.getParameterValues("fareAmount[]");
        String[] transTripTypes = request.getParameterValues("transTripType[]");
        String[] transBurdens = request.getParameterValues("transBurden[]");
        String[] expenseTotals = request.getParameterValues("expenseTotal[]");
        String[] transMemos = request.getParameterValues("transMemo[]");

        for (int i = 0; i < numSubmittedBlocks; i++) {
            Step3Detail detail;
            if (i < detailsInSession.size()) {
                detail = detailsInSession.get(i);
            } else {
                detail = new Step3Detail();
                detailsInSession.add(detail);
            }

            detail.setTransProject(transProjects[i]);
            detail.setDeparture(departures[i]);
            detail.setArrival(arrivals[i]);
            detail.setTransport(transports[i]);
            detail.setFareAmount(Integer.parseInt(fareAmounts[i]));
            detail.setTransTripType(transTripTypes[i]);
            detail.setTransBurden(transBurdens[i]);
            detail.setTransExpenseTotal(Integer.parseInt(expenseTotals[i]));
            detail.setTransMemo(transMemos[i]);
        }

        // 4. Xóa các block bị người dùng xóa trên giao diện
        while (detailsInSession.size() > numSubmittedBlocks) {
            detailsInSession.remove(detailsInSession.size() - 1);
        }

        // 5. Xử lý các file MỚI được tải lên
        Collection<Part> allParts = request.getParts();
        for (int i = 0; i < numSubmittedBlocks; i++) {
            String fileInputName = "receipt_transport_" + i;
            List<Part> newFileParts = allParts.stream()
                .filter(part -> fileInputName.equals(part.getName()) && part.getSize() > 0)
                .collect(Collectors.toList());

            if (!newFileParts.isEmpty()) {
                Step3Detail detail = detailsInSession.get(i);
                detail.getTemporaryFiles().clear();
                for (Part filePart : newFileParts) {
                    // ... (Copy/paste code xử lý upload file của bạn vào đây)
                    try {
                        String originalFileName = Paths.get(filePart.getSubmittedFileName()).getFileName().toString();
                        String uniqueFileName = UUID.randomUUID().toString() + "_" + originalFileName;
                        String absoluteUploadPath = getServletContext().getRealPath(TEMP_UPLOAD_DIR);
                        File uploadDir = new File(absoluteUploadPath);
                        if (!uploadDir.exists()) uploadDir.mkdirs();
                        File savedFile = new File(uploadDir, uniqueFileName);
                        try (InputStream input = filePart.getInputStream()) {
                            Files.copy(input, savedFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                        }
                        UploadedFile uploadedFile = new UploadedFile();
                        uploadedFile.setOriginalFileName(originalFileName);
                        uploadedFile.setUniqueStoredName(uniqueFileName);
                        uploadedFile.setTemporaryPath(TEMP_UPLOAD_DIR + "/" + uniqueFileName);
                        detail.getTemporaryFiles().add(uploadedFile);
                    } catch (Exception e) {
                        System.err.println("Lỗi xử lý file upload ở Step 3, index " + i + ": " + e.getMessage());
                    }
                }
            }
        }
        
        session.setAttribute("trip", trip);
        response.sendRedirect(request.getContextPath() + "/businessTripConfirm");
    }
}