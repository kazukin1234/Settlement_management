package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import model.Application;
import util.DBConnection;

/**
 * 申請情報（application_header テーブル）に関するデータアクセス処理を提供するDAOクラスです。
 * 出張や経費などの申請の登録・更新・取得・承認者管理などを行います。
 *【Generated by ChatGPT】
 */
public class ApplicationDAO {

    // =========================================================================
    // == CÁC HÀM ĐÃ SỬA LỖI TRANSACTION (NHẬN THAM SỐ Connection)
    // =========================================================================

	// Chèn một application header mới như một phần của transaction lớn.
	/**
     * application_header テーブルに新しい申請データを登録します。
     * 初期状態（status='未提出'）で、現在時刻を登録日として扱います。
     *
     * @param type 申請種別
     * @param staffId 申請を行う社員のID
     * @param amount 申請金額
     * @param conn 外部から渡されるデータベース接続（トランザクション中）
     * @return 登録された申請のID（自動採番された主キー）
     * @throws SQLException SQL実行時に発生したエラー
     * 【Generated by ChatGPT】
     */
    public int insertApplication(String type, String staffId, int amount, Connection conn) throws SQLException {
        String sql = "INSERT INTO application_header (application_type, staff_id, status, amount, created_at, updated_at) " +
                     "VALUES (?, ?, '未提出', ?, NOW(), NOW())";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, type);
            ps.setString(2, staffId);
            ps.setInt(3, amount);
            ps.executeUpdate();
            try (ResultSet rs = ps.getGeneratedKeys()) {
                if (rs.next()) return rs.getInt(1);
            }
        }
        throw new SQLException("application_header の登録に失敗しました。");
    }

    /**
     * Gán người duyệt đơn như một phần của transaction lớn.
     * 指定された申請に対し、承認者IDを設定します。
     *
     * @param applicationId 対象の申請ID
     * @param approverId 承認者の社員ID
     * @param conn 外部から渡されるDB接続（トランザクション中）
     * @throws SQLException SQL実行時に発生したエラー
     * 【Generated by ChatGPT】
     */
    public void setApprover(int applicationId, String approverId, Connection conn) throws SQLException {
        String sql = "UPDATE application_header SET approver_id = ? WHERE application_id = ?";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, approverId);
            ps.setInt(2, applicationId);
            ps.executeUpdate();
        }
    }

    /**
     * Nộp đơn (đổi status) như một phần của transaction lớn.
     * 指定された申請が未提出（status='未提出') の場合に「提出済み」へ更新します。
     * 同時に承認者IDを設定します。
     *
     * @param applicationId 対象の申請ID
     * @param staffId 申請者の社員ID
     * @param approverId 設定する承認者の社員ID
     * @param conn データベース接続（トランザクション中）
     * @throws SQLException SQL実行時のエラー
     * 【Generated by ChatGPT】
     */
    public void submitApplicationIfNotYet(int applicationId, String staffId, String approverId, Connection conn) throws SQLException {
        String sql = "UPDATE application_header SET status = '提出済み', approver_id = ? " +
                     "WHERE application_id = ? AND staff_id = ? AND status = '未提出'";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, approverId);
            ps.setInt(2, applicationId);
            ps.setString(3, staffId);
            ps.executeUpdate();
        }
    }

    // =========================================================================
    // == CÁC HÀM CŨ CỦA BẠN (Đa phần là chỉ đọc, tự quản lý Connection)
    // =========================================================================
    
    /**
     * すべての申請情報を取得し、申請IDの降順で返却します。
     *
     * @return 申請情報のリスト
     * @throws Exception SQLまたは接続エラー時
     * 【Generated by ChatGPT】
     */
    public List<Application> getAllApplications() throws Exception {
        List<Application> list = new ArrayList<>();
        String sql = "SELECT application_id, application_type, amount, status ,created_at FROM application_header ORDER BY application_id DESC";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {
            while (rs.next()) {
                Application a = new Application();
                a.setApplicationId(rs.getInt("application_id"));
                a.setApplicationType(rs.getString("application_type"));
                a.setAmount(rs.getInt("amount"));
                a.setStatus(rs.getString("status"));
                a.setCreatedAt(rs.getTimestamp("created_at"));
                list.add(a);
            }
        }
        return list;
    }
    
    /**
     * 指定された社員IDが作成した申請情報を、申請IDの降順で取得します。
     *
     * @param staffId 対象の社員ID
     * @return 該当社員の申請一覧
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public List<Application> getApplicationsByStaffId(String staffId) throws Exception {
        List<Application> list = new ArrayList<>();
        String sql = "SELECT application_id, application_type, application_date, amount, status FROM application_header WHERE staff_id = ? ORDER BY application_id DESC";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, staffId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Application a = new Application();
                    a.setApplicationId(rs.getInt("application_id"));
                    a.setApplicationType(rs.getString("application_type"));
                    a.setAmount(rs.getInt("amount"));
                    a.setStatus(rs.getString("status"));
                    a.setCreatedAt(rs.getTimestamp("created_at"));
                    list.add(a);
                }
            }
        }
        return list;
    }
    
    /**
     * 指定された社員と同じ部署で「部長」の役職を持つ社員IDを取得します。
     *
     * @param staffId 部署判定の元となる社員ID
     * @return 該当する部長の社員ID（なければ null）
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public String findManagerId(String staffId) throws Exception {
        String sql = """
            SELECT s2.staff_id
            FROM staff s1
            JOIN staff s2 ON s1.department_id = s2.department_id
            JOIN position_master p2 ON s2.position_id = p2.position_id
            WHERE s1.staff_id = ?
              AND p2.position_name = '部長'
              AND s2.delete_flag = 0 AND p2.delete_flag = 0
            LIMIT 1
        """;
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, staffId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("staff_id");
                }
            }
        }
        return null;
    }
    
    /**
     * 指定された申請IDに紐づく申請ステータス（status列）を取得します。
     *
     * @param appId 対象の申請ID
     * @return ステータス（例：未提出、提出済みなど）
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public String getApplicationStatus(int appId) throws Exception {
        String sql = "SELECT status FROM application_header WHERE application_id = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, appId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) return rs.getString("status");
            }
        }
        return null;
    }
    
    /**
     * 申請IDから申請種別（application_type）を取得します。
     *
     * @param applicationId 対象の申請ID
     * @return 申請種別（文字列）
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public String getApplicationTypeById(int applicationId) throws Exception {
        String sql = "SELECT application_type FROM application_header WHERE application_id = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, applicationId);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) return rs.getString("application_type");
            }
        }
        return null;
    }
    
    /**
     * 指定された申請IDに対応する申請金額を更新します。
     *
     * @param applicationId 対象の申請ID
     * @param newAmount 新しい申請金額
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public void updateApplicationAmount(int applicationId, int newAmount) throws Exception {
        String sql = "UPDATE application_header SET amount = ? WHERE application_id = ?";
        try (Connection conn = DBConnection.getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setInt(1, newAmount);
            ps.setInt(2, applicationId);
            ps.executeUpdate();
        }
    }
    
    /**
     * 指定された承認者IDに割り当てられた申請情報を取得します。
     *
     * @param approverId 承認者の社員ID
     * @return 対象申請のリスト（申請者情報を含む）
     * @throws Exception SQL実行時エラー
     * 【Generated by ChatGPT】
     */
    public List<Application> getApplicationsByApprover(String approverId) throws Exception {
        List<Application> list = new ArrayList<>();
        String sql = """
            SELECT 
                ah.application_id, ah.application_type, 
                ah.amount, ah.status, ah.created_at, s.staff_id, s.name
            FROM application_header ah
            JOIN staff s ON ah.staff_id = s.staff_id
            WHERE ah.approver_id = ? AND ah.delete_flag = 0
            ORDER BY ah.application_date DESC
            """;
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {
            ps.setString(1, approverId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    Application a = new Application();
                    a.setApplicationId(rs.getInt("application_id"));
                    a.setApplicationType(rs.getString("application_type"));
                    a.setAmount(rs.getInt("amount"));
                    a.setStatus(rs.getString("status"));
                    a.setCreatedAt(rs.getTimestamp("created_at"));
                    a.setStaffId(rs.getString("staff_id"));
                    a.setStaffName(rs.getString("name"));
                    list.add(a);
                }
            }
        }
        return list;
    }
}
